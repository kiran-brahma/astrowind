---
export interface Props {
  title: string;
  value: string;
  description: string;
}

const { title, value, description } = Astro.props;
---

<div class="stats-counter text-center p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
  <h3 class="stats-title text-gray-600 dark:text-gray-400 mb-2 text-lg">{title}</h3>
  
  <div class="stats-value text-5xl font-bold text-blue-600 dark:text-blue-400 mb-3">{value}</div>
  
  <p class="stats-description text-gray-500 dark:text-gray-400">{description}</p>
</div>

<script>
  // Add this if you want animated counters
  document.addEventListener('DOMContentLoaded', () => {
    const counters = document.querySelectorAll('.stats-value');
    
    counters.forEach(counter => {
      const target = counter.innerText;
      // Only animate numeric values
      if (!isNaN(parseInt(target.replace(/[^0-9.-]+/g, '')))) {
        counter.innerText = '0';
        
        const updateCounter = () => {
          const currentValue = counter.innerText;
          const numericTarget = parseInt(target.replace(/[^0-9.-]+/g, ''));
          const increment = numericTarget / 20; // Adjust speed
          
          if (parseInt(currentValue) < numericTarget) {
            counter.innerText = Math.ceil(parseInt(currentValue) + increment);
            setTimeout(updateCounter, 50);
          } else {
            counter.innerText = target;
          }
        }
        
        // Start animation when element is in viewport
        const observer = new IntersectionObserver((entries) => {
          if (entries[0].isIntersecting) {
            updateCounter();
            observer.disconnect();
          }
        }, { threshold: 0.5 });
        
        observer.observe(counter);
      }
    });
  });
</script>
